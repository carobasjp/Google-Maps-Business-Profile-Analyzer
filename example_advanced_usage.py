"""
Exemplo de uso avan√ßado do Google Maps Ranking Analyzer
Demonstra diferentes cen√°rios e an√°lises comparativas
"""

from gmb_ranking_analyzer import GoogleMapsRankingAnalyzer, generate_reports
import pandas as pd
import yaml
from pathlib import Path
import logging

logger = logging.getLogger(__name__)


def load_config(config_file: str = "config.yaml") -> dict:
    """Carrega configura√ß√µes do arquivo YAML"""
    with open(config_file, 'r', encoding='utf-8') as f:
        return yaml.safe_load(f)


def analyze_single_keyword(config: dict):
    """An√°lise simples com uma palavra-chave"""
    
    print("\n" + "="*80)
    print("AN√ÅLISE √öNICA - PALAVRA-CHAVE")
    print("="*80 + "\n")
    
    api_key = config['api']['key']
    search_params = config['search']
    
    analyzer = GoogleMapsRankingAnalyzer(api_key)
    
    metrics_list, df = analyzer.run_analysis(
        location=search_params['location'],
        radius=search_params['radius'],
        keyword=search_params['keyword'],
        max_pages=search_params['max_pages']
    )
    
    # Gera relat√≥rios
    files = generate_reports(df, search_params['keyword'])
    
    # Exibe insights
    print_insights(df, search_params['keyword'])
    
    return df


def analyze_multiple_keywords(config: dict):
    """An√°lise comparativa com m√∫ltiplas palavras-chave"""
    
    print("\n" + "="*80)
    print("AN√ÅLISE COMPARATIVA - M√öLTIPLAS PALAVRAS-CHAVE")
    print("="*80 + "\n")
    
    if not config['search']['multiple_keywords']['enabled']:
        print("‚ùå An√°lise m√∫ltipla desabilitada no config.yaml")
        return None
    
    api_key = config['api']['key']
    search_params = config['search']
    keywords = config['search']['multiple_keywords']['keywords']
    
    analyzer = GoogleMapsRankingAnalyzer(api_key)
    
    all_results = {}
    
    for keyword in keywords:
        print(f"\nüìä Analisando: '{keyword}'...")
        
        metrics_list, df = analyzer.run_analysis(
            location=search_params['location'],
            radius=search_params['radius'],
            keyword=keyword,
            max_pages=search_params['max_pages']
        )
        
        all_results[keyword] = df
        
        # Gera relat√≥rios individuais
        generate_reports(df, keyword)
    
    # Cria relat√≥rio comparativo
    create_comparative_report(all_results, search_params['location'])
    
    return all_results


def analyze_competitor(config: dict, target_place_id: str, competitor_place_ids: list):
    """An√°lise focada em um neg√≥cio espec√≠fico vs concorrentes"""
    
    print("\n" + "="*80)
    print("AN√ÅLISE COMPETITIVA - SEU NEG√ìCIO VS CONCORRENTES")
    print("="*80 + "\n")
    
    api_key = config['api']['key']
    search_params = config['search']
    
    analyzer = GoogleMapsRankingAnalyzer(api_key)
    
    # Executa busca completa
    metrics_list, df = analyzer.run_analysis(
        location=search_params['location'],
        radius=search_params['radius'],
        keyword=search_params['keyword'],
        max_pages=search_params['max_pages']
    )
    
    # Filtra para o neg√≥cio alvo e concorrentes
    focus_ids = [target_place_id] + competitor_place_ids
    df_focus = df[df['place_id'].isin(focus_ids)].copy()
    
    if len(df_focus) == 0:
        print("‚ùå Neg√≥cio alvo ou concorrentes n√£o encontrados nos resultados")
        return None
    
    # Identifica o neg√≥cio alvo
    df_focus['is_target'] = df_focus['place_id'] == target_place_id
    df_focus = df_focus.sort_values('is_target', ascending=False)
    
    print("\nüìä COMPARA√á√ÉO COMPETITIVA:\n")
    print("-" * 80)
    
    for idx, row in df_focus.iterrows():
        marker = "üéØ SEU NEG√ìCIO" if row['is_target'] else "üî¥ CONCORRENTE"
        print(f"\n{marker}")
        print(f"Nome: {row['name']}")
        print(f"Posi√ß√£o no ranking: #{row['rank_position']}")
        print(f"Score geral: {row['overall_strength_score']:.2f} {row['strength_category']}")
        print(f"Rating: {row['rating']:.1f} ‚≠ê ({row['total_reviews']} reviews)")
        print(f"Percentil: Top {100 - row['percentile_rank']:.1f}%")
        print("-" * 80)
    
    # Identifica gaps e oportunidades
    if df_focus['is_target'].any():
        target_row = df_focus[df_focus['is_target']].iloc[0]
        competitors_df = df_focus[~df_focus['is_target']]
        
        print("\nüí° AN√ÅLISE DE GAPS E OPORTUNIDADES:\n")
        
        # Compara m√©tricas
        metrics_to_compare = [
            ('rating_quality_score', 'Qualidade das Avalia√ß√µes'),
            ('review_velocity_score', 'Velocidade de Reviews'),
            ('completeness_score', 'Completude do Perfil'),
            ('authority_score', 'Autoridade'),
            ('relevance_score', 'Relev√¢ncia')
        ]
        
        for metric, label in metrics_to_compare:
            target_value = target_row[metric]
            competitor_avg = competitors_df[metric].mean()
            competitor_max = competitors_df[metric].max()
            
            gap_vs_avg = target_value - competitor_avg
            gap_vs_best = target_value - competitor_max
            
            status = "‚úÖ" if gap_vs_avg > 0 else "‚ö†Ô∏è"
            
            print(f"{status} {label}:")
            print(f"   Voc√™: {target_value:.2f} | M√©dia concorrentes: {competitor_avg:.2f} | Melhor: {competitor_max:.2f}")
            print(f"   Gap vs m√©dia: {gap_vs_avg:+.2f} | Gap vs melhor: {gap_vs_best:+.2f}")
            print()
    
    # Salva relat√≥rio
    output_dir = Path(config['reports']['output_directory'])
    output_dir.mkdir(exist_ok=True)
    
    comp_file = output_dir / f"competitive_analysis_{search_params['keyword']}.xlsx"
    with pd.ExcelWriter(comp_file, engine='openpyxl') as writer:
        df_focus.to_excel(writer, sheet_name='Compara√ß√£o', index=False)
        
        # Cria tabela de gaps
        if df_focus['is_target'].any():
            gaps_data = []
            for metric, label in metrics_to_compare:
                gaps_data.append({
                    'M√©trica': label,
                    'Seu Valor': target_row[metric],
                    'M√©dia Concorrentes': competitors_df[metric].mean(),
                    'Melhor Concorrente': competitors_df[metric].max(),
                    'Gap vs M√©dia': target_row[metric] - competitors_df[metric].mean(),
                    'Gap vs Melhor': target_row[metric] - competitors_df[metric].max()
                })
            
            gaps_df = pd.DataFrame(gaps_data)
            gaps_df.to_excel(writer, sheet_name='An√°lise de Gaps', index=False)
    
    print(f"\nüìÅ Relat√≥rio competitivo salvo: {comp_file}")
    
    return df_focus


def print_insights(df: pd.DataFrame, keyword: str):
    """Exibe insights principais da an√°lise"""
    
    print("\n" + "="*80)
    print(f"INSIGHTS - {keyword.upper()}")
    print("="*80 + "\n")
    
    # Estat√≠sticas gerais
    print("üìà ESTAT√çSTICAS GERAIS:")
    print(f"   Total de perfis: {len(df)}")
    print(f"   Score m√©dio: {df['overall_strength_score'].mean():.2f}")
    print(f"   Rating m√©dio: {df['rating'].mean():.2f} ‚≠ê")
    print(f"   M√©dia de reviews: {df['total_reviews'].mean():.0f}")
    print(f"   Dist√¢ncia m√©dia: {df['distance_from_center'].mean():.0f}m")
    
    # Top performer
    top = df.iloc[0]
    print(f"\nüèÜ L√çDER DO MERCADO:")
    print(f"   {top['name']}")
    print(f"   Score: {top['overall_strength_score']:.2f} {top['strength_category']}")
    print(f"   Rating: {top['rating']:.1f} ‚≠ê ({top['total_reviews']} reviews)")
    
    # Distribui√ß√£o por categoria
    print(f"\nüìä DISTRIBUI√á√ÉO POR FOR√áA:")
    for category, count in df['strength_category'].value_counts().items():
        pct = (count / len(df)) * 100
        bar = "‚ñà" * int(pct / 5)
        print(f"   {category}: {count:3d} ({pct:5.1f}%) {bar}")
    
    # Correla√ß√µes interessantes
    print(f"\nüîç INSIGHTS AVAN√áADOS:")
    
    # Correla√ß√£o rating vs position
    corr_rating = df[['rank_position', 'rating']].corr().iloc[0, 1]
    print(f"   Correla√ß√£o Rating x Posi√ß√£o: {corr_rating:.3f}")
    
    # Correla√ß√£o reviews vs score
    corr_reviews = df[['total_reviews', 'overall_strength_score']].corr().iloc[0, 1]
    print(f"   Correla√ß√£o Reviews x Score: {corr_reviews:.3f}")
    
    # Perfis com alta completude
    high_completeness = df[df['completeness_score'] >= 80]
    print(f"   Perfis com alta completude (‚â•80): {len(high_completeness)} ({len(high_completeness)/len(df)*100:.1f}%)")
    
    # Perfis com website
    with_website = df[df['website'].notna()]
    print(f"   Perfis com website: {len(with_website)} ({len(with_website)/len(df)*100:.1f}%)")
    
    print("\n" + "="*80)


def create_comparative_report(results_dict: dict, location: str):
    """Cria relat√≥rio comparativo entre m√∫ltiplas palavras-chave"""
    
    print("\n" + "="*80)
    print("GERANDO RELAT√ìRIO COMPARATIVO")
    print("="*80 + "\n")
    
    output_dir = Path("output")
    output_dir.mkdir(exist_ok=True)
    
    comparison_file = output_dir / "comparative_analysis_all_keywords.xlsx"
    
    with pd.ExcelWriter(comparison_file, engine='openpyxl') as writer:
        # Para cada keyword, adiciona uma aba
        for keyword, df in results_dict.items():
            sheet_name = keyword[:31]  # Excel limit
            df.head(20).to_excel(writer, sheet_name=sheet_name, index=False)
        
        # Cria aba de resumo
        summary_data = []
        for keyword, df in results_dict.items():
            summary_data.append({
                'Palavra-chave': keyword,
                'Total Resultados': len(df),
                'Score M√©dio': df['overall_strength_score'].mean(),
                'Rating M√©dio': df['rating'].mean(),
                'Reviews M√©dio': df['total_reviews'].mean(),
                'Top Score': df['overall_strength_score'].max(),
                'Top Rating': df['rating'].max()
            })
        
        summary_df = pd.DataFrame(summary_data)
        summary_df = summary_df.round(2)
        summary_df.to_excel(writer, sheet_name='Resumo Comparativo', index=False)
    
    print(f"üìÅ Relat√≥rio comparativo salvo: {comparison_file}")


def main():
    """Execu√ß√£o principal com diferentes cen√°rios"""
    
    # Carrega configura√ß√µes
    config = load_config()
    
    print("""
‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë                                                                            ‚ïë
‚ïë          GOOGLE MAPS BUSINESS PROFILE ANALYZER & RANKING TOOL              ‚ïë
‚ïë                    Sistema Profissional de An√°lise                         ‚ïë
‚ïë                                                                            ‚ïë
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù
    """)
    
    # Menu de op√ß√µes
    print("\nEscolha o tipo de an√°lise:")
    print("1. An√°lise √∫nica (uma palavra-chave)")
    print("2. An√°lise comparativa (m√∫ltiplas palavras-chave)")
    print("3. An√°lise competitiva (seu neg√≥cio vs concorrentes)")
    print("0. Sair")
    
    choice = input("\nOp√ß√£o: ").strip()
    
    if choice == "1":
        analyze_single_keyword(config)
    
    elif choice == "2":
        analyze_multiple_keywords(config)
    
    elif choice == "3":
        print("\nInsira os Place IDs (separados por v√≠rgula):")
        target = input("Seu neg√≥cio: ").strip()
        competitors_input = input("Concorrentes: ").strip()
        competitors = [c.strip() for c in competitors_input.split(",") if c.strip()]
        
        if target and competitors:
            analyze_competitor(config, target, competitors)
        else:
            print("‚ùå Place IDs inv√°lidos")
    
    elif choice == "0":
        print("\nüëã At√© logo!")
        return
    
    else:
        print("‚ùå Op√ß√£o inv√°lida")
        return
    
    print("\n‚úÖ An√°lise conclu√≠da com sucesso!")
    print("\nüìÅ Verifique a pasta 'output' para os relat√≥rios gerados.")


if __name__ == "__main__":
    main()
